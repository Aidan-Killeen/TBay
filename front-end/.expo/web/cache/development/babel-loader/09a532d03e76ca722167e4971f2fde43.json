{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { AnimatedTick } from \"../internal/Tick\";\nimport MKColor from \"../MKColor\";\nimport { getTheme } from \"../theme\";\nimport * as utils from \"../utils\";\nimport Ripple from \"./Ripple\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DEFAULT_EXTRA_RIPPLE_RADII = 5;\nvar defaultProps = {\n  checked: false,\n  editable: true,\n  maskColor: MKColor.Transparent,\n  pointerEvents: 'box-only',\n  style: {\n    height: 20,\n    width: 20,\n    alignItems: 'center',\n    borderRadius: 1,\n    borderWidth: 2,\n    justifyContent: 'center',\n    overflow: 'hidden'\n  }\n};\n\nvar Checkbox = function (_Component) {\n  _inherits(Checkbox, _Component);\n\n  var _super = _createSuper(Checkbox);\n\n  function Checkbox(props) {\n    var _this;\n\n    _classCallCheck(this, Checkbox);\n\n    _this = _super.call(this, props);\n    _this.theme = getTheme();\n    _this.animatedTickAlpha = new Animated.Value(0);\n\n    _this.onLayout = function (_ref) {\n      var _ref$nativeEvent$layo = _ref.nativeEvent.layout,\n          width = _ref$nativeEvent$layo.width,\n          height = _ref$nativeEvent$layo.height;\n\n      if (width === _this.state.width && height === _this.state.height) {\n        return;\n      }\n\n      var size = Math.min(width, height);\n      var rippleRadii = size * Math.SQRT2 / 2 + (_this.props.extraRippleRadius || DEFAULT_EXTRA_RIPPLE_RADII);\n\n      _this.setState({\n        rippleRadii: rippleRadii,\n        height: rippleRadii * 2,\n        width: rippleRadii * 2\n      });\n    };\n\n    _this.onTouch = function (_ref2) {\n      var type = _ref2.type;\n\n      if (type === 'TOUCH_UP' && _this.props.editable) {\n        _this.confirmToggle();\n      }\n    };\n\n    _this.state = {\n      checked: false,\n      height: 0,\n      rippleRadii: 0,\n      width: 0\n    };\n    return _this;\n  }\n\n  _createClass(Checkbox, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      this.initView(this.props.checked);\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (nextProps.checked !== this.props.checked && nextProps !== this.state.checked) {\n        this.initView(nextProps.checked || false);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var defaultStyle = this.theme.checkboxStyle;\n\n      var mergedStyle = _extends({}, defaultStyle, utils.extractProps(this, ['borderOnColor', 'borderOffColor', 'fillColor', 'rippleColor', 'inset']));\n\n      var borderColor = this.state.checked ? mergedStyle.borderOnColor : mergedStyle.borderOffColor;\n      return _jsx(TouchableWithoutFeedback, _objectSpread(_objectSpread({}, utils.extractTouchableProps(this)), {}, {\n        children: _jsx(Ripple, _objectSpread(_objectSpread({}, this.props), {}, {\n          maskBorderRadiusInPercent: 50,\n          rippleLocation: \"center\",\n          rippleColor: mergedStyle.rippleColor,\n          onTouch: this.onTouch,\n          style: {\n            alignItems: 'center',\n            height: this.state.height,\n            justifyContent: 'center',\n            width: this.state.width\n          },\n          children: _jsx(View, {\n            style: [defaultProps.style, this.props.style, {\n              alignItems: 'stretch',\n              borderColor: borderColor\n            }],\n            onLayout: this.onLayout,\n            children: _jsx(AnimatedTick, {\n              inset: mergedStyle.inset,\n              fillColor: mergedStyle.fillColor,\n              style: {\n                flex: 1,\n                opacity: this.animatedTickAlpha\n              }\n            })\n          })\n        }))\n      }));\n    }\n  }, {\n    key: \"initView\",\n    value: function initView() {\n      var checked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.setState({\n        checked: checked\n      });\n      this.aniToggle(checked);\n    }\n  }, {\n    key: \"aniToggle\",\n    value: function aniToggle(checked) {\n      Animated.timing(this.animatedTickAlpha, {\n        duration: 220,\n        toValue: checked ? 1 : 0\n      }).start();\n    }\n  }, {\n    key: \"confirmToggle\",\n    value: function confirmToggle() {\n      var _this2 = this;\n\n      var prevState = this.state.checked;\n      var newState = !prevState;\n      this.setState({\n        checked: newState\n      }, function () {\n        if (_this2.props.onCheckedChange) {\n          _this2.props.onCheckedChange({\n            checked: _this2.state.checked\n          });\n        }\n      });\n      this.aniToggle(newState);\n    }\n  }]);\n\n  return Checkbox;\n}(Component);\n\nexport { Checkbox as default };\nCheckbox.defaultProps = defaultProps;","map":{"version":3,"sources":["/Users/iraklisbogiatziou/Desktop/TBAY/front-end/node_modules/react-native-material-kit/lib/mdl/Checkbox.js"],"names":["React","Component","AnimatedTick","MKColor","getTheme","utils","Ripple","DEFAULT_EXTRA_RIPPLE_RADII","defaultProps","checked","editable","maskColor","Transparent","pointerEvents","style","height","width","alignItems","borderRadius","borderWidth","justifyContent","overflow","Checkbox","props","theme","animatedTickAlpha","Animated","Value","onLayout","nativeEvent","layout","state","size","Math","min","rippleRadii","SQRT2","extraRippleRadius","setState","onTouch","type","confirmToggle","initView","nextProps","defaultStyle","checkboxStyle","mergedStyle","extractProps","borderColor","borderOnColor","borderOffColor","extractTouchableProps","rippleColor","inset","fillColor","flex","opacity","aniToggle","timing","duration","toValue","start","prevState","newState","onCheckedChange"],"mappings":";;;;;;;;;;;;;;;;AAOA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,SAASC,YAAT;AACA,OAAOC,OAAP;AACA,SAASC,QAAT;AACA,OAAO,KAAKC,KAAZ;AACA,OAAOC,MAAP;;AACA,IAAMC,0BAA0B,GAAG,CAAnC;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,QAAQ,EAAE,IAFO;AAGjBC,EAAAA,SAAS,EAAER,OAAO,CAACS,WAHF;AAIjBC,EAAAA,aAAa,EAAE,UAJE;AAKjBC,EAAAA,KAAK,EAAE;AACHC,IAAAA,MAAM,EAAE,EADL;AAEHC,IAAAA,KAAK,EAAE,EAFJ;AAGHC,IAAAA,UAAU,EAAE,QAHT;AAIHC,IAAAA,YAAY,EAAE,CAJX;AAKHC,IAAAA,WAAW,EAAE,CALV;AAMHC,IAAAA,cAAc,EAAE,QANb;AAOHC,IAAAA,QAAQ,EAAE;AAPP;AALU,CAArB;;IAqBqBC,Q;;;;;AACjB,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAapB,QAAQ,EAArB;AACA,UAAKqB,iBAAL,GAAyB,IAAIC,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAzB;;AAEA,UAAKC,QAAL,GAAgB,gBAAsD;AAAA,uCAAnDC,WAAmD,CAApCC,MAAoC;AAAA,UAA1Bd,KAA0B,yBAA1BA,KAA0B;AAAA,UAAnBD,MAAmB,yBAAnBA,MAAmB;;AAClE,UAAIC,KAAK,KAAK,MAAKe,KAAL,CAAWf,KAArB,IAA8BD,MAAM,KAAK,MAAKgB,KAAL,CAAWhB,MAAxD,EAAgE;AAC5D;AACH;;AACD,UAAMiB,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASlB,KAAT,EAAgBD,MAAhB,CAAb;AACA,UAAMoB,WAAW,GAAIH,IAAI,GAAGC,IAAI,CAACG,KAAb,GAAsB,CAAtB,IAA2B,MAAKb,KAAL,CAAWc,iBAAX,IAAgC9B,0BAA3D,CAApB;;AACA,YAAK+B,QAAL,CAAc;AACVH,QAAAA,WAAW,EAAXA,WADU;AAEVpB,QAAAA,MAAM,EAAEoB,WAAW,GAAG,CAFZ;AAGVnB,QAAAA,KAAK,EAAEmB,WAAW,GAAG;AAHX,OAAd;AAKH,KAXD;;AAaA,UAAKI,OAAL,GAAe,iBAAc;AAAA,UAAXC,IAAW,SAAXA,IAAW;;AACzB,UAAIA,IAAI,KAAK,UAAT,IAAuB,MAAKjB,KAAL,CAAWb,QAAtC,EAAgD;AAC5C,cAAK+B,aAAL;AACH;AACJ,KAJD;;AAKA,UAAKV,KAAL,GAAa;AACTtB,MAAAA,OAAO,EAAE,KADA;AAETM,MAAAA,MAAM,EAAE,CAFC;AAGToB,MAAAA,WAAW,EAAE,CAHJ;AAITnB,MAAAA,KAAK,EAAE;AAJE,KAAb;AAvBe;AA6BlB;;;;WACD,qCAA4B;AACxB,WAAK0B,QAAL,CAAc,KAAKnB,KAAL,CAAWd,OAAzB;AACH;;;WAKD,0CAAiCkC,SAAjC,EAA4C;AACxC,UAAIA,SAAS,CAAClC,OAAV,KAAsB,KAAKc,KAAL,CAAWd,OAAjC,IAA4CkC,SAAS,KAAK,KAAKZ,KAAL,CAAWtB,OAAzE,EAAkF;AAC9E,aAAKiC,QAAL,CAAcC,SAAS,CAAClC,OAAV,IAAqB,KAAnC;AACH;AACJ;;;WACD,kBAAS;AACL,UAAMmC,YAAY,GAAG,KAAKpB,KAAL,CAAWqB,aAAhC;;AACA,UAAMC,WAAW,GAAG,SAAc,EAAd,EAAkBF,YAAlB,EAAgCvC,KAAK,CAAC0C,YAAN,CAAmB,IAAnB,EAAyB,CAAC,eAAD,EAAkB,gBAAlB,EAAoC,WAApC,EAAiD,aAAjD,EAAgE,OAAhE,CAAzB,CAAhC,CAApB;;AACA,UAAMC,WAAW,GAAG,KAAKjB,KAAL,CAAWtB,OAAX,GAAqBqC,WAAW,CAACG,aAAjC,GAAiDH,WAAW,CAACI,cAAjF;AACA,aAAQ,KAAC,wBAAD,kCAA8B7C,KAAK,CAAC8C,qBAAN,CAA4B,IAA5B,CAA9B;AAAA,kBACR,KAAC,MAAD,kCAAY,KAAK5B,KAAjB;AAAwB,UAAA,yBAAyB,EAAE,EAAnD;AAAuD,UAAA,cAAc,EAAC,QAAtE;AAA+E,UAAA,WAAW,EAAEuB,WAAW,CAACM,WAAxG;AAAqH,UAAA,OAAO,EAAE,KAAKb,OAAnI;AAA4I,UAAA,KAAK,EAAE;AAC/ItB,YAAAA,UAAU,EAAE,QADmI;AAE/IF,YAAAA,MAAM,EAAE,KAAKgB,KAAL,CAAWhB,MAF4H;AAG/IK,YAAAA,cAAc,EAAE,QAH+H;AAI/IJ,YAAAA,KAAK,EAAE,KAAKe,KAAL,CAAWf;AAJ6H,WAAnJ;AAAA,oBAME,KAAC,IAAD;AAAM,YAAA,KAAK,EAAE,CACXR,YAAY,CAACM,KADF,EAEX,KAAKS,KAAL,CAAWT,KAFA,EAGX;AACIG,cAAAA,UAAU,EAAE,SADhB;AAEI+B,cAAAA,WAAW,EAAXA;AAFJ,aAHW,CAAb;AAOC,YAAA,QAAQ,EAAE,KAAKpB,QAPhB;AAAA,sBAQE,KAAC,YAAD;AAAc,cAAA,KAAK,EAAEkB,WAAW,CAACO,KAAjC;AAAwC,cAAA,SAAS,EAAEP,WAAW,CAACQ,SAA/D;AAA0E,cAAA,KAAK,EAAE;AACjFC,gBAAAA,IAAI,EAAE,CAD2E;AAEjFC,gBAAAA,OAAO,EAAE,KAAK/B;AAFmE;AAAjF;AARF;AANF;AADQ,SAAR;AAsBH;;;WACD,oBAA0B;AAAA,UAAjBhB,OAAiB,uEAAP,KAAO;AACtB,WAAK6B,QAAL,CAAc;AAAE7B,QAAAA,OAAO,EAAPA;AAAF,OAAd;AACA,WAAKgD,SAAL,CAAehD,OAAf;AACH;;;WAED,mBAAUA,OAAV,EAAmB;AACfiB,MAAAA,QAAQ,CAACgC,MAAT,CAAgB,KAAKjC,iBAArB,EAAwC;AACpCkC,QAAAA,QAAQ,EAAE,GAD0B;AAEpCC,QAAAA,OAAO,EAAEnD,OAAO,GAAG,CAAH,GAAO;AAFa,OAAxC,EAGGoD,KAHH;AAIH;;;WAED,yBAAgB;AAAA;;AACZ,UAAMC,SAAS,GAAG,KAAK/B,KAAL,CAAWtB,OAA7B;AACA,UAAMsD,QAAQ,GAAG,CAACD,SAAlB;AACA,WAAKxB,QAAL,CAAc;AAAE7B,QAAAA,OAAO,EAAEsD;AAAX,OAAd,EAAqC,YAAM;AACvC,YAAI,MAAI,CAACxC,KAAL,CAAWyC,eAAf,EAAgC;AAC5B,UAAA,MAAI,CAACzC,KAAL,CAAWyC,eAAX,CAA2B;AAAEvD,YAAAA,OAAO,EAAE,MAAI,CAACsB,KAAL,CAAWtB;AAAtB,WAA3B;AACH;AACJ,OAJD;AAKA,WAAKgD,SAAL,CAAeM,QAAf;AACH;;;;EA3FiC9D,S;;SAAjBqB,Q;AA8FrBA,QAAQ,CAACd,YAAT,GAAwBA,YAAxB","sourcesContent":["/**\n * MDL-style Checkbox component.\n *\n * See {@link http://www.getmdl.io/components/index.html#toggles-section/checkbox | MDL Checkbox}\n *\n * Created by ywu on 15/12/13.\n */\nimport React, { Component } from 'react';\nimport { Animated, TouchableWithoutFeedback, View, } from 'react-native';\nimport { AnimatedTick } from '../internal/Tick';\nimport MKColor from '../MKColor';\nimport { getTheme } from '../theme';\nimport * as utils from '../utils';\nimport Ripple from './Ripple';\nconst DEFAULT_EXTRA_RIPPLE_RADII = 5;\n/** Default props of {@link Checkbox} */\nconst defaultProps = {\n    checked: false,\n    editable: true,\n    maskColor: MKColor.Transparent,\n    pointerEvents: 'box-only',\n    style: {\n        height: 20,\n        width: 20,\n        alignItems: 'center',\n        borderRadius: 1,\n        borderWidth: 2,\n        justifyContent: 'center',\n        overflow: 'hidden',\n    },\n};\n/**\n * The `Checkbox` component.\n *\n * @remarks\n * See {@link https://material.io/components/selection-controls/#checkboxes | Guideline} & {@link http://www.getmdl.io/components/index.html#toggles-section/checkbox | MDL implementation}\n */\nexport default class Checkbox extends Component {\n    constructor(props) {\n        super(props);\n        this.theme = getTheme();\n        this.animatedTickAlpha = new Animated.Value(0);\n        /** Layout event handler */\n        this.onLayout = ({ nativeEvent: { layout: { width, height }, }, }) => {\n            if (width === this.state.width && height === this.state.height) {\n                return;\n            }\n            const size = Math.min(width, height);\n            const rippleRadii = (size * Math.SQRT2) / 2 + (this.props.extraRippleRadius || DEFAULT_EXTRA_RIPPLE_RADII);\n            this.setState({\n                rippleRadii,\n                height: rippleRadii * 2,\n                width: rippleRadii * 2,\n            });\n        };\n        /** Touch event handler */\n        this.onTouch = ({ type }) => {\n            if (type === 'TOUCH_UP' && this.props.editable) {\n                this.confirmToggle();\n            }\n        };\n        this.state = {\n            checked: false,\n            height: 0,\n            rippleRadii: 0,\n            width: 0,\n        };\n    }\n    UNSAFE_componentWillMount() {\n        this.initView(this.props.checked);\n    }\n    /**\n     * TODO using controlled components.\n     * @see https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html?#preferred-solutions\n     */\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        if (nextProps.checked !== this.props.checked && nextProps !== this.state.checked) {\n            this.initView(nextProps.checked || false);\n        }\n    }\n    render() {\n        const defaultStyle = this.theme.checkboxStyle;\n        const mergedStyle = Object.assign({}, defaultStyle, utils.extractProps(this, ['borderOnColor', 'borderOffColor', 'fillColor', 'rippleColor', 'inset']));\n        const borderColor = this.state.checked ? mergedStyle.borderOnColor : mergedStyle.borderOffColor;\n        return (<TouchableWithoutFeedback {...utils.extractTouchableProps(this)}>\n        <Ripple {...this.props} maskBorderRadiusInPercent={50} rippleLocation=\"center\" rippleColor={mergedStyle.rippleColor} onTouch={this.onTouch} style={{\n            alignItems: 'center',\n            height: this.state.height,\n            justifyContent: 'center',\n            width: this.state.width,\n        }}>\n          <View style={[\n            defaultProps.style,\n            this.props.style,\n            {\n                alignItems: 'stretch',\n                borderColor,\n            },\n        ]} onLayout={this.onLayout}>\n            <AnimatedTick inset={mergedStyle.inset} fillColor={mergedStyle.fillColor} style={{\n            flex: 1,\n            opacity: this.animatedTickAlpha,\n        }}/>\n          </View>\n        </Ripple>\n      </TouchableWithoutFeedback>);\n    }\n    initView(checked = false) {\n        this.setState({ checked });\n        this.aniToggle(checked);\n    }\n    /** animate the checked state, by scaling the inner circle */\n    aniToggle(checked) {\n        Animated.timing(this.animatedTickAlpha, {\n            duration: 220,\n            toValue: checked ? 1 : 0,\n        }).start();\n    }\n    /** When a toggle action (from the given state) is confirmed. */\n    confirmToggle() {\n        const prevState = this.state.checked;\n        const newState = !prevState;\n        this.setState({ checked: newState }, () => {\n            if (this.props.onCheckedChange) {\n                this.props.onCheckedChange({ checked: this.state.checked });\n            }\n        });\n        this.aniToggle(newState);\n    }\n}\n/** Default props */\nCheckbox.defaultProps = defaultProps;\n//# sourceMappingURL=Checkbox.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, createRef } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AnimatedThumb from \"../internal/SwitchThumb\";\nimport { getTheme } from \"../theme\";\nimport * as utils from \"../utils\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar defaultThumbRadius = 14;\nvar defaultTrackLength = 48;\nvar defaultTrackSize = 20;\n\nvar Switch = function (_Component) {\n  _inherits(Switch, _Component);\n\n  var _super = _createSuper(Switch);\n\n  function Switch(props) {\n    var _this;\n\n    _classCallCheck(this, Switch);\n\n    _this = _super.call(this, props);\n    _this.theme = getTheme();\n    _this.thumbRef = createRef();\n    _this.animatedThumbLeft = new Animated.Value(0);\n\n    _this.onPress = function (event) {\n      _this.confirmToggle();\n\n      _this.props.onPress && _this.props.onPress(event);\n    };\n\n    _this.onPressIn = function (event) {\n      _this.startToggle();\n\n      _this.props.onPressIn && _this.props.onPressIn(event);\n    };\n\n    _this.onPressOut = function (event) {\n      _this.endToggle();\n\n      _this.props.onPressOut && _this.props.onPressOut(event);\n    };\n\n    _this.state = {\n      checked: false,\n      thumbFrame: {\n        padding: 0,\n        r: 0,\n        rippleRadii: 0,\n        x: 0\n      },\n      trackLength: 0,\n      trackMargin: 0,\n      trackRadii: 0,\n      trackSize: 0\n    };\n    return _this;\n  }\n\n  _createClass(Switch, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function UNSAFE_componentWillMount() {\n      this.initLayout(this.props);\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (nextProps.checked !== this.props.checked && nextProps.checked !== this.state.checked) {\n        this.initLayout(nextProps);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var touchProps = {\n        delayLongPress: this.props.delayLongPress,\n        delayPressIn: this.props.delayPressIn,\n        delayPressOut: this.props.delayPressOut,\n        onLongPress: this.props.onLongPress\n      };\n\n      var mergedStyle = _extends({}, this.theme.switchStyle, utils.compact({\n        offColor: this.props.offColor,\n        onColor: this.props.onColor,\n        rippleColor: this.props.rippleColor,\n        thumbOffColor: this.props.thumbOffColor,\n        thumbOnColor: this.props.thumbOnColor\n      }));\n\n      var thumbFrame = this.state.thumbFrame;\n      var thumbProps = {\n        checked: this.state.checked,\n        offColor: mergedStyle.thumbOffColor,\n        onColor: mergedStyle.thumbOnColor,\n        radius: this.props.thumbRadius,\n        rippleAniDuration: this.props.rippleAniDuration,\n        rippleColor: mergedStyle.rippleColor,\n        rippleRadius: thumbFrame.rippleRadii,\n        style: {\n          left: this.animatedThumbLeft,\n          top: 0\n        },\n        thumbStyle: {\n          borderRadius: this.props.thumbRadius,\n          left: thumbFrame.padding,\n          top: thumbFrame.padding,\n          height: (this.props.thumbRadius || defaultThumbRadius) * 2,\n          width: (this.props.thumbRadius || defaultThumbRadius) * 2\n        }\n      };\n      return _jsx(TouchableWithoutFeedback, _objectSpread(_objectSpread({}, touchProps), {}, {\n        onPress: this.onPress,\n        onPressIn: this.onPressIn,\n        onPressOut: this.onPressOut,\n        children: _jsxs(View, {\n          pointerEvents: \"box-only\",\n          style: this.props.style,\n          children: [_jsx(View, {\n            style: {\n              backgroundColor: this.getBgColor(mergedStyle),\n              borderRadius: this.state.trackRadii,\n              height: this.props.trackSize,\n              margin: this.state.trackMargin,\n              width: this.props.trackLength\n            }\n          }), _jsx(AnimatedThumb, _objectSpread({\n            ref: this.thumbRef\n          }, thumbProps))]\n        })\n      }));\n    }\n  }, {\n    key: \"thumb\",\n    get: function get() {\n      var animatedThumb = this.thumbRef.current;\n      return animatedThumb && animatedThumb.getNode();\n    }\n  }, {\n    key: \"getBgColor\",\n    value: function getBgColor(theme) {\n      var onColor = this.props.onColor || theme.onColor;\n      var offColor = this.props.offColor || theme.offColor;\n      return this.state.checked ? onColor : offColor;\n    }\n  }, {\n    key: \"layoutThumb\",\n    value: function layoutThumb(checked, thumbRadius, trackLength, trackSize) {\n      trackSize = trackSize || defaultTrackSize;\n      trackLength = trackLength || defaultTrackLength;\n      var thumbRadii = thumbRadius || defaultThumbRadius;\n      var rippleRadii = trackLength - trackSize;\n      var trackRadii = trackSize / 2;\n      var trackMargin = rippleRadii - trackRadii;\n      var thumbLeft = checked ? trackMargin + trackRadii : 0;\n      this.animatedThumbLeft.setValue(thumbLeft);\n      return {\n        thumbFrame: {\n          padding: rippleRadii - thumbRadii,\n          r: thumbRadii,\n          rippleRadii: rippleRadii,\n          x: thumbLeft\n        },\n        trackLength: trackLength,\n        trackMargin: trackMargin,\n        trackRadii: trackRadii,\n        trackSize: trackSize\n      };\n    }\n  }, {\n    key: \"initLayout\",\n    value: function initLayout(props) {\n      var nextState = this.layoutThumb(props.checked || false, props.thumbRadius, props.trackLength, props.trackSize);\n      this.setState(_extends(_extends({}, nextState), {\n        checked: props.checked || false\n      }));\n    }\n  }, {\n    key: \"translateThumb\",\n    value: function translateThumb() {\n      var _this2 = this;\n\n      this.animatedThumbLeft.setValue(this.state.thumbFrame.x);\n      var newX = this.computeThumbX(this.state.checked);\n      Animated.timing(this.animatedThumbLeft, {\n        duration: this.props.thumbAniDuration || 300,\n        toValue: newX\n      }).start(function () {\n        _this2.state.thumbFrame.x = newX;\n      });\n    }\n  }, {\n    key: \"computeThumbX\",\n    value: function computeThumbX(toChecked) {\n      if (!this.state.thumbFrame.r) {\n        return 0;\n      }\n\n      var _this$state = this.state,\n          trackLength = _this$state.trackLength,\n          trackSize = _this$state.trackSize;\n      var dx = (toChecked ? 1 : -1) * (trackLength - trackSize);\n      return this.state.thumbFrame.x + dx;\n    }\n  }, {\n    key: \"startToggle\",\n    value: function startToggle() {\n      this.thumb && this.thumb.startToggle();\n    }\n  }, {\n    key: \"confirmToggle\",\n    value: function confirmToggle() {\n      var _this3 = this;\n\n      var prevState = this.state.checked;\n      this.setState({\n        checked: !prevState\n      }, function () {\n        _this3.thumb && _this3.thumb.confirmToggle(prevState);\n\n        _this3.translateThumb();\n\n        if (_this3.props.onCheckedChange) {\n          _this3.props.onCheckedChange({\n            checked: _this3.state.checked\n          });\n        }\n      });\n    }\n  }, {\n    key: \"endToggle\",\n    value: function endToggle() {\n      this.thumb && this.thumb.endToggle();\n    }\n  }]);\n\n  return Switch;\n}(Component);\n\nexport { Switch as default };\nSwitch.defaultProps = {\n  checked: false,\n  thumbRadius: defaultThumbRadius,\n  trackLength: defaultTrackLength,\n  trackSize: defaultTrackSize\n};","map":{"version":3,"sources":["/Users/iraklisbogiatziou/Desktop/TBAY/front-end/node_modules/react-native-material-kit/lib/mdl/Switch.js"],"names":["React","Component","createRef","AnimatedThumb","getTheme","utils","defaultThumbRadius","defaultTrackLength","defaultTrackSize","Switch","props","theme","thumbRef","animatedThumbLeft","Animated","Value","onPress","event","confirmToggle","onPressIn","startToggle","onPressOut","endToggle","state","checked","thumbFrame","padding","r","rippleRadii","x","trackLength","trackMargin","trackRadii","trackSize","initLayout","nextProps","touchProps","delayLongPress","delayPressIn","delayPressOut","onLongPress","mergedStyle","switchStyle","compact","offColor","onColor","rippleColor","thumbOffColor","thumbOnColor","thumbProps","radius","thumbRadius","rippleAniDuration","rippleRadius","style","left","top","thumbStyle","borderRadius","height","width","backgroundColor","getBgColor","margin","animatedThumb","current","getNode","thumbRadii","thumbLeft","setValue","nextState","layoutThumb","setState","newX","computeThumbX","timing","duration","thumbAniDuration","toValue","start","toChecked","dx","thumb","prevState","translateThumb","onCheckedChange","defaultProps"],"mappings":";;;;;;;;;;;;;;;;AASA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;;;;AAEA,OAAOC,aAAP;AACA,SAASC,QAAT;AACA,OAAO,KAAKC,KAAZ;;;AACA,IAAMC,kBAAkB,GAAG,EAA3B;AACA,IAAMC,kBAAkB,GAAG,EAA3B;AACA,IAAMC,gBAAgB,GAAG,EAAzB;;IASqBC,M;;;;;AACjB,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAaP,QAAQ,EAArB;AACA,UAAKQ,QAAL,GAAgBV,SAAS,EAAzB;AACA,UAAKW,iBAAL,GAAyB,IAAIC,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAzB;;AACA,UAAKC,OAAL,GAAe,UAACC,KAAD,EAAW;AACtB,YAAKC,aAAL;;AACA,YAAKR,KAAL,CAAWM,OAAX,IAAsB,MAAKN,KAAL,CAAWM,OAAX,CAAmBC,KAAnB,CAAtB;AACH,KAHD;;AAIA,UAAKE,SAAL,GAAiB,UAACF,KAAD,EAAW;AACxB,YAAKG,WAAL;;AACA,YAAKV,KAAL,CAAWS,SAAX,IAAwB,MAAKT,KAAL,CAAWS,SAAX,CAAqBF,KAArB,CAAxB;AACH,KAHD;;AAIA,UAAKI,UAAL,GAAkB,UAACJ,KAAD,EAAW;AACzB,YAAKK,SAAL;;AACA,YAAKZ,KAAL,CAAWW,UAAX,IAAyB,MAAKX,KAAL,CAAWW,UAAX,CAAsBJ,KAAtB,CAAzB;AACH,KAHD;;AAIA,UAAKM,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAE,KADA;AAETC,MAAAA,UAAU,EAAE;AACRC,QAAAA,OAAO,EAAE,CADD;AAERC,QAAAA,CAAC,EAAE,CAFK;AAGRC,QAAAA,WAAW,EAAE,CAHL;AAIRC,QAAAA,CAAC,EAAE;AAJK,OAFH;AAQTC,MAAAA,WAAW,EAAE,CARJ;AASTC,MAAAA,WAAW,EAAE,CATJ;AAUTC,MAAAA,UAAU,EAAE,CAVH;AAWTC,MAAAA,SAAS,EAAE;AAXF,KAAb;AAjBe;AA8BlB;;;;WACD,qCAA4B;AAExB,WAAKC,UAAL,CAAgB,KAAKxB,KAArB;AACH;;;WACD,0CAAiCyB,SAAjC,EAA4C;AAExC,UAAIA,SAAS,CAACX,OAAV,KAAsB,KAAKd,KAAL,CAAWc,OAAjC,IAA4CW,SAAS,CAACX,OAAV,KAAsB,KAAKD,KAAL,CAAWC,OAAjF,EAA0F;AACtF,aAAKU,UAAL,CAAgBC,SAAhB;AACH;AACJ;;;WAED,kBAAS;AACL,UAAMC,UAAU,GAAG;AACfC,QAAAA,cAAc,EAAE,KAAK3B,KAAL,CAAW2B,cADZ;AAEfC,QAAAA,YAAY,EAAE,KAAK5B,KAAL,CAAW4B,YAFV;AAGfC,QAAAA,aAAa,EAAE,KAAK7B,KAAL,CAAW6B,aAHX;AAIfC,QAAAA,WAAW,EAAE,KAAK9B,KAAL,CAAW8B;AAJT,OAAnB;;AAMA,UAAMC,WAAW,GAAG,SAAc,EAAd,EAAkB,KAAK9B,KAAL,CAAW+B,WAA7B,EAA0CrC,KAAK,CAACsC,OAAN,CAAc;AACxEC,QAAAA,QAAQ,EAAE,KAAKlC,KAAL,CAAWkC,QADmD;AAExEC,QAAAA,OAAO,EAAE,KAAKnC,KAAL,CAAWmC,OAFoD;AAGxEC,QAAAA,WAAW,EAAE,KAAKpC,KAAL,CAAWoC,WAHgD;AAIxEC,QAAAA,aAAa,EAAE,KAAKrC,KAAL,CAAWqC,aAJ8C;AAKxEC,QAAAA,YAAY,EAAE,KAAKtC,KAAL,CAAWsC;AAL+C,OAAd,CAA1C,CAApB;;AAOA,UAAMvB,UAAU,GAAG,KAAKF,KAAL,CAAWE,UAA9B;AACA,UAAMwB,UAAU,GAAG;AACfzB,QAAAA,OAAO,EAAE,KAAKD,KAAL,CAAWC,OADL;AAEfoB,QAAAA,QAAQ,EAAEH,WAAW,CAACM,aAFP;AAGfF,QAAAA,OAAO,EAAEJ,WAAW,CAACO,YAHN;AAIfE,QAAAA,MAAM,EAAE,KAAKxC,KAAL,CAAWyC,WAJJ;AAKfC,QAAAA,iBAAiB,EAAE,KAAK1C,KAAL,CAAW0C,iBALf;AAMfN,QAAAA,WAAW,EAAEL,WAAW,CAACK,WANV;AAOfO,QAAAA,YAAY,EAAE5B,UAAU,CAACG,WAPV;AAQf0B,QAAAA,KAAK,EAAE;AACHC,UAAAA,IAAI,EAAE,KAAK1C,iBADR;AAEH2C,UAAAA,GAAG,EAAE;AAFF,SARQ;AAYfC,QAAAA,UAAU,EAAE;AACRC,UAAAA,YAAY,EAAE,KAAKhD,KAAL,CAAWyC,WADjB;AAERI,UAAAA,IAAI,EAAE9B,UAAU,CAACC,OAFT;AAGR8B,UAAAA,GAAG,EAAE/B,UAAU,CAACC,OAHR;AAIRiC,UAAAA,MAAM,EAAE,CAAC,KAAKjD,KAAL,CAAWyC,WAAX,IAA0B7C,kBAA3B,IAAiD,CAJjD;AAKRsD,UAAAA,KAAK,EAAE,CAAC,KAAKlD,KAAL,CAAWyC,WAAX,IAA0B7C,kBAA3B,IAAiD;AALhD;AAZG,OAAnB;AAoBA,aAAQ,KAAC,wBAAD,kCAA8B8B,UAA9B;AAA0C,QAAA,OAAO,EAAE,KAAKpB,OAAxD;AAAiE,QAAA,SAAS,EAAE,KAAKG,SAAjF;AAA4F,QAAA,UAAU,EAAE,KAAKE,UAA7G;AAAA,kBACR,MAAC,IAAD;AAAM,UAAA,aAAa,EAAC,UAApB;AAA+B,UAAA,KAAK,EAAE,KAAKX,KAAL,CAAW4C,KAAjD;AAAA,qBACE,KAAC,IAAD;AACD,YAAA,KAAK,EAAE;AACJO,cAAAA,eAAe,EAAE,KAAKC,UAAL,CAAgBrB,WAAhB,CADb;AAEJiB,cAAAA,YAAY,EAAE,KAAKnC,KAAL,CAAWS,UAFrB;AAGJ2B,cAAAA,MAAM,EAAE,KAAKjD,KAAL,CAAWuB,SAHf;AAIJ8B,cAAAA,MAAM,EAAE,KAAKxC,KAAL,CAAWQ,WAJf;AAKJ6B,cAAAA,KAAK,EAAE,KAAKlD,KAAL,CAAWoB;AALd;AADN,YADF,EASE,KAAC,aAAD;AACD,YAAA,GAAG,EAAE,KAAKlB;AADT,aACuBqC,UADvB,EATF;AAAA;AADQ,SAAR;AAcH;;;SAKD,eAAY;AACR,UAAMe,aAAa,GAAG,KAAKpD,QAAL,CAAcqD,OAApC;AACA,aAAOD,aAAa,IAAIA,aAAa,CAACE,OAAd,EAAxB;AACH;;;WACD,oBAAWvD,KAAX,EAAkB;AACd,UAAMkC,OAAO,GAAG,KAAKnC,KAAL,CAAWmC,OAAX,IAAsBlC,KAAK,CAACkC,OAA5C;AACA,UAAMD,QAAQ,GAAG,KAAKlC,KAAL,CAAWkC,QAAX,IAAuBjC,KAAK,CAACiC,QAA9C;AACA,aAAO,KAAKrB,KAAL,CAAWC,OAAX,GAAqBqB,OAArB,GAA+BD,QAAtC;AACH;;;WAED,qBAAYpB,OAAZ,EAAqB2B,WAArB,EAAkCrB,WAAlC,EAA+CG,SAA/C,EAA0D;AACtDA,MAAAA,SAAS,GAAGA,SAAS,IAAIzB,gBAAzB;AACAsB,MAAAA,WAAW,GAAGA,WAAW,IAAIvB,kBAA7B;AACA,UAAM4D,UAAU,GAAGhB,WAAW,IAAI7C,kBAAlC;AACA,UAAMsB,WAAW,GAAGE,WAAW,GAAGG,SAAlC;AACA,UAAMD,UAAU,GAAGC,SAAS,GAAG,CAA/B;AACA,UAAMF,WAAW,GAAGH,WAAW,GAAGI,UAAlC;AACA,UAAMoC,SAAS,GAAG5C,OAAO,GAAGO,WAAW,GAAGC,UAAjB,GAA8B,CAAvD;AACA,WAAKnB,iBAAL,CAAuBwD,QAAvB,CAAgCD,SAAhC;AACA,aAAO;AACH3C,QAAAA,UAAU,EAAE;AACRC,UAAAA,OAAO,EAAEE,WAAW,GAAGuC,UADf;AAERxC,UAAAA,CAAC,EAAEwC,UAFK;AAGRvC,UAAAA,WAAW,EAAXA,WAHQ;AAIRC,UAAAA,CAAC,EAAEuC;AAJK,SADT;AAOHtC,QAAAA,WAAW,EAAXA,WAPG;AAQHC,QAAAA,WAAW,EAAXA,WARG;AASHC,QAAAA,UAAU,EAAVA,UATG;AAUHC,QAAAA,SAAS,EAATA;AAVG,OAAP;AAYH;;;WAED,oBAAWvB,KAAX,EAAkB;AACd,UAAM4D,SAAS,GAAG,KAAKC,WAAL,CAAiB7D,KAAK,CAACc,OAAN,IAAiB,KAAlC,EAAyCd,KAAK,CAACyC,WAA/C,EAA4DzC,KAAK,CAACoB,WAAlE,EAA+EpB,KAAK,CAACuB,SAArF,CAAlB;AACA,WAAKuC,QAAL,CAAc,SAAc,SAAc,EAAd,EAAkBF,SAAlB,CAAd,EAA4C;AAAE9C,QAAAA,OAAO,EAAEd,KAAK,CAACc,OAAN,IAAiB;AAA5B,OAA5C,CAAd;AACH;;;WAED,0BAAiB;AAAA;;AACb,WAAKX,iBAAL,CAAuBwD,QAAvB,CAAgC,KAAK9C,KAAL,CAAWE,UAAX,CAAsBI,CAAtD;AACA,UAAM4C,IAAI,GAAG,KAAKC,aAAL,CAAmB,KAAKnD,KAAL,CAAWC,OAA9B,CAAb;AACAV,MAAAA,QAAQ,CAAC6D,MAAT,CAAgB,KAAK9D,iBAArB,EAAwC;AACpC+D,QAAAA,QAAQ,EAAE,KAAKlE,KAAL,CAAWmE,gBAAX,IAA+B,GADL;AAEpCC,QAAAA,OAAO,EAAEL;AAF2B,OAAxC,EAGGM,KAHH,CAGS,YAAM;AACX,QAAA,MAAI,CAACxD,KAAL,CAAWE,UAAX,CAAsBI,CAAtB,GAA0B4C,IAA1B;AACH,OALD;AAMH;;;WAED,uBAAcO,SAAd,EAAyB;AACrB,UAAI,CAAC,KAAKzD,KAAL,CAAWE,UAAX,CAAsBE,CAA3B,EAA8B;AAC1B,eAAO,CAAP;AACH;;AACD,wBAAmC,KAAKJ,KAAxC;AAAA,UAAQO,WAAR,eAAQA,WAAR;AAAA,UAAqBG,SAArB,eAAqBA,SAArB;AACA,UAAMgD,EAAE,GAAG,CAACD,SAAS,GAAG,CAAH,GAAO,CAAC,CAAlB,KAAwBlD,WAAW,GAAGG,SAAtC,CAAX;AACA,aAAO,KAAKV,KAAL,CAAWE,UAAX,CAAsBI,CAAtB,GAA0BoD,EAAjC;AACH;;;WAED,uBAAc;AACV,WAAKC,KAAL,IAAc,KAAKA,KAAL,CAAW9D,WAAX,EAAd;AACH;;;WAED,yBAAgB;AAAA;;AACZ,UAAM+D,SAAS,GAAG,KAAK5D,KAAL,CAAWC,OAA7B;AACA,WAAKgD,QAAL,CAAc;AAAEhD,QAAAA,OAAO,EAAE,CAAC2D;AAAZ,OAAd,EAAuC,YAAM;AACzC,QAAA,MAAI,CAACD,KAAL,IAAc,MAAI,CAACA,KAAL,CAAWhE,aAAX,CAAyBiE,SAAzB,CAAd;;AACA,QAAA,MAAI,CAACC,cAAL;;AACA,YAAI,MAAI,CAAC1E,KAAL,CAAW2E,eAAf,EAAgC;AAC5B,UAAA,MAAI,CAAC3E,KAAL,CAAW2E,eAAX,CAA2B;AAAE7D,YAAAA,OAAO,EAAE,MAAI,CAACD,KAAL,CAAWC;AAAtB,WAA3B;AACH;AACJ,OAND;AAOH;;;WAED,qBAAY;AACR,WAAK0D,KAAL,IAAc,KAAKA,KAAL,CAAW5D,SAAX,EAAd;AACH;;;;EA5K+BrB,S;;SAAfQ,M;AA+KrBA,MAAM,CAAC6E,YAAP,GAAsB;AAClB9D,EAAAA,OAAO,EAAE,KADS;AAElB2B,EAAAA,WAAW,EAAE7C,kBAFK;AAGlBwB,EAAAA,WAAW,EAAEvB,kBAHK;AAIlB0B,EAAAA,SAAS,EAAEzB;AAJO,CAAtB","sourcesContent":["/**\n * MDL style switch component.\n *\n * <image src=\"http://bit.ly/1OF6Z96\" width=\"400\"/>\n *\n * See {@link http://bit.ly/1IcHMPo | MDL Switch}\n *\n * Created by ywu on 15/7/28.\n */\nimport React, { Component, createRef } from 'react';\nimport { Animated, TouchableWithoutFeedback, View, } from 'react-native';\nimport AnimatedThumb from '../internal/SwitchThumb';\nimport { getTheme } from '../theme';\nimport * as utils from '../utils';\nconst defaultThumbRadius = 14;\nconst defaultTrackLength = 48;\nconst defaultTrackSize = 20;\n/**\n * The `Switch` component.\n *\n * @remarks\n * Which is made up of a `Track` and a {@link Thumb}.\n *\n * See {@link https://material.io/components/selection-controls/#switches | Guideline} & {@link http://bit.ly/1IcHMPo | MDL implementation}\n */\nexport default class Switch extends Component {\n    constructor(props) {\n        super(props);\n        this.theme = getTheme();\n        this.thumbRef = createRef();\n        this.animatedThumbLeft = new Animated.Value(0);\n        this.onPress = (event) => {\n            this.confirmToggle();\n            this.props.onPress && this.props.onPress(event);\n        };\n        this.onPressIn = (event) => {\n            this.startToggle();\n            this.props.onPressIn && this.props.onPressIn(event);\n        };\n        this.onPressOut = (event) => {\n            this.endToggle();\n            this.props.onPressOut && this.props.onPressOut(event);\n        };\n        this.state = {\n            checked: false,\n            thumbFrame: {\n                padding: 0,\n                r: 0,\n                rippleRadii: 0,\n                x: 0,\n            },\n            trackLength: 0,\n            trackMargin: 0,\n            trackRadii: 0,\n            trackSize: 0,\n        };\n    }\n    UNSAFE_componentWillMount() {\n        // console.log('--- Switch.componentWillReceiveProps');\n        this.initLayout(this.props);\n    }\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        // console.log('--- Switch.componentWillReceiveProps');\n        if (nextProps.checked !== this.props.checked && nextProps.checked !== this.state.checked) {\n            this.initLayout(nextProps);\n        }\n    }\n    /** {@inheritDoc @types/react#Component.render} */\n    render() {\n        const touchProps = {\n            delayLongPress: this.props.delayLongPress,\n            delayPressIn: this.props.delayPressIn,\n            delayPressOut: this.props.delayPressOut,\n            onLongPress: this.props.onLongPress,\n        };\n        const mergedStyle = Object.assign({}, this.theme.switchStyle, utils.compact({\n            offColor: this.props.offColor,\n            onColor: this.props.onColor,\n            rippleColor: this.props.rippleColor,\n            thumbOffColor: this.props.thumbOffColor,\n            thumbOnColor: this.props.thumbOnColor,\n        }));\n        const thumbFrame = this.state.thumbFrame;\n        const thumbProps = {\n            checked: this.state.checked,\n            offColor: mergedStyle.thumbOffColor,\n            onColor: mergedStyle.thumbOnColor,\n            radius: this.props.thumbRadius,\n            rippleAniDuration: this.props.rippleAniDuration,\n            rippleColor: mergedStyle.rippleColor,\n            rippleRadius: thumbFrame.rippleRadii,\n            style: {\n                left: this.animatedThumbLeft,\n                top: 0,\n            },\n            thumbStyle: {\n                borderRadius: this.props.thumbRadius,\n                left: thumbFrame.padding,\n                top: thumbFrame.padding,\n                height: (this.props.thumbRadius || defaultThumbRadius) * 2,\n                width: (this.props.thumbRadius || defaultThumbRadius) * 2,\n            },\n        };\n        return (<TouchableWithoutFeedback {...touchProps} onPress={this.onPress} onPressIn={this.onPressIn} onPressOut={this.onPressOut}>\n        <View pointerEvents=\"box-only\" style={this.props.style}>\n          <View // the 'track' part\n         style={{\n            backgroundColor: this.getBgColor(mergedStyle),\n            borderRadius: this.state.trackRadii,\n            height: this.props.trackSize,\n            margin: this.state.trackMargin,\n            width: this.props.trackLength,\n        }}/>\n          <AnimatedThumb // the 'thumb' part\n         ref={this.thumbRef} {...thumbProps}/>\n        </View>\n      </TouchableWithoutFeedback>);\n    }\n    /**\n     * Un-boxing the `Thumb` node from `AnimatedComponent`,\n     * in order to access the component functions defined in `Thumb`\n     */\n    get thumb() {\n        const animatedThumb = this.thumbRef.current;\n        return animatedThumb && animatedThumb.getNode();\n    }\n    getBgColor(theme) {\n        const onColor = this.props.onColor || theme.onColor;\n        const offColor = this.props.offColor || theme.offColor;\n        return this.state.checked ? onColor : offColor;\n    }\n    /** Layout the thumb according to the size of the track */\n    layoutThumb(checked, thumbRadius, trackLength, trackSize) {\n        trackSize = trackSize || defaultTrackSize;\n        trackLength = trackLength || defaultTrackLength;\n        const thumbRadii = thumbRadius || defaultThumbRadius;\n        const rippleRadii = trackLength - trackSize;\n        const trackRadii = trackSize / 2;\n        const trackMargin = rippleRadii - trackRadii; // make room for ripple\n        const thumbLeft = checked ? trackMargin + trackRadii : 0;\n        this.animatedThumbLeft.setValue(thumbLeft);\n        return {\n            thumbFrame: {\n                padding: rippleRadii - thumbRadii,\n                r: thumbRadii,\n                rippleRadii,\n                x: thumbLeft,\n            },\n            trackLength,\n            trackMargin,\n            trackRadii,\n            trackSize,\n        };\n    }\n    /** init layout according to the props */\n    initLayout(props) {\n        const nextState = this.layoutThumb(props.checked || false, props.thumbRadius, props.trackLength, props.trackSize);\n        this.setState(Object.assign(Object.assign({}, nextState), { checked: props.checked || false }));\n    }\n    /** Move the thumb left or right according to the current state */\n    translateThumb() {\n        this.animatedThumbLeft.setValue(this.state.thumbFrame.x);\n        const newX = this.computeThumbX(this.state.checked);\n        Animated.timing(this.animatedThumbLeft, {\n            duration: this.props.thumbAniDuration || 300,\n            toValue: newX,\n        }).start(() => {\n            this.state.thumbFrame.x = newX;\n        });\n    }\n    /** Calc the next position (x-axis) of the thumb */\n    computeThumbX(toChecked) {\n        if (!this.state.thumbFrame.r) {\n            return 0;\n        }\n        const { trackLength, trackSize } = this.state;\n        const dx = (toChecked ? 1 : -1) * (trackLength - trackSize);\n        return this.state.thumbFrame.x + dx;\n    }\n    /** When a toggle action started. */\n    startToggle() {\n        this.thumb && this.thumb.startToggle();\n    }\n    /** When a toggle action is confirmed. */\n    confirmToggle() {\n        const prevState = this.state.checked;\n        this.setState({ checked: !prevState }, () => {\n            this.thumb && this.thumb.confirmToggle(prevState);\n            this.translateThumb();\n            if (this.props.onCheckedChange) {\n                this.props.onCheckedChange({ checked: this.state.checked });\n            }\n        });\n    }\n    /** When a toggle action is finished (confirmed or canceled). */\n    endToggle() {\n        this.thumb && this.thumb.endToggle();\n    }\n}\n/** Default props */\nSwitch.defaultProps = {\n    checked: false,\n    thumbRadius: defaultThumbRadius,\n    trackLength: defaultTrackLength,\n    trackSize: defaultTrackSize,\n};\n//# sourceMappingURL=Switch.js.map"]},"metadata":{},"sourceType":"module"}